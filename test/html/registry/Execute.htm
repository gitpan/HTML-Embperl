
# -*- mode: perl -*-
use HTML::Embperl ;

my($r) = @_;



$tst1 = '<P>Here is some text</P>' ;

$r -> status (200) ;
$r -> send_http_header () ;

print "<HTML><TITLE>Test for HTML::Embperl::Execute</TITLE><BODY>\n" ;
print "<H1> 1.) Include from memory</H1>\n" ;

HTML::Embperl::Execute ({input		=> \$tst1,
						 mtime      => 1,  
						 inputfile	=> 'blabla',
						 req_rec    => $r}) ;


print "<H1> 2.) Include from memory with some Embperl code</H1>\n" ;

HTML::Embperl::Execute ({input		=> \'[- @ar = (a1, b2, c3) -]<table><tr><td>[+$ar[$col]+]</td></tr></table></P>',
						 mtime      => 1,  
						 inputfile	=> 'blabla2',
						 req_rec    => $r}) ;

print "<H1> 3.) Include from memory with passing of variables</H1>\n" ;


$MyPackage::Interface::Var = 'Some Var' ;

HTML::Embperl::Execute ({input		=> \'<P>Transfer some vars [+ $Var +] !</P>',
						 inputfile	=> 'blabla3',
						 mtime      => 1,
						 'package'  => 'MyPackage::Interface',
						 req_rec    => $r}) ;

print "<H1> 4.) Change the variable, but not the code</H1>\n" ;

$MyPackage::Interface::Var = 'Do it again' ;

# code is the same, so give the same mtime and inputfile to avoid recompile

HTML::Embperl::Execute ({input		=> \'<P>Transfer some vars [+ $Var +] !</P>',
						 inputfile	=> 'blabla3',
						 mtime      => 1,  
						 'package'  => 'MyPackage::Interface',
						 req_rec    => $r}) ;

print "<H1> 5.) Inculde a file</H1>\n" ;


HTML::Embperl::Execute ({inputfile	=> '../inc.htm',
						 req_rec    => $r}) ;


print "<H1> 6.) Inculde a file and return output in a scalar</H1>\n" ;

my $out ;

HTML::Embperl::Execute ({inputfile	=> '../inc.htm',
						 output     => \$out,
						 req_rec    => $r}) ;


print "<H3>$out</H3>\n" ;

print "<H1> 7.) Done :-)</H1>\n" ;


print "</body></html>\n";
